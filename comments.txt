1. instantiate Express and assign your app variable to it. this variable is used to configure a bunch of Express stuff.
2. tells the app the location of its views
3. tells the app what engine to use to render those views (Jade)
4. tells Express to serve static objects (pages) from the /public/ dir, but to make them actually seem like they're coming from the top level (it also does this with the views directory). 
  For example, the images directory is c:\node\hackberry\public\images â€¦ 
  but it is accessed at http://localhost:3000/images

5. tell Express what route files to use (to keep things simple, we're going to do everything in the index router)
  
  Advice: set up separate route files for different parts of your app. 
  For example, 
    the users route file might contain routes for adding users, deleting them, updating them, and so forth, 
    while a new route file called "locations" might handle adding, editing, deleting and displaying location data (in an app for which that was required).

6. the Express scaffolding defines the "routes" variable to be pointed at the index router ('/'). 
7. bring in our Express functionality
8. attach a "router" variable to Express's router method
9. use the Express's router method when an attempt is made to HTTP-get the top level directory of our website
10. export our router function back to our app.
11. use (or "extend") the file layout.jade as a template
12. within the content block defined in the layout.jade file, it sticks a header and a paragraph. 
13. the "title" variable was set above, in our index.js route.
14. set the "title" variable (property) for the jade
15. tell our app we want to talk to MongoDB
16. tell our app we want to use Monk to talk to MongoDB
17. the location of our database. It's our Monk connection object
18. establish middleware for Express, i.e. provide custom functions that the rest of your app can make use of. Due to chaining this needs to come before our route definitions, so that they can make use of it
19. we're adding the Monk connection object (-db-) to every HTTP request (ie: "req") our app makes. 
  Note: this is probably sub-optimal for performance but, again, we're going quick-n-dirty here.

